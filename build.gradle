import com.github.spotbugs.snom.SpotBugsTask

plugins {
    id "java"
    id 'pmd'
    id "edu.wpi.first.GradleRIO" version "2025.2.1"
    id "com.github.spotbugs" version "5.0.14"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                    deleteOldFiles = false // Change to true to delete files on roboRIO that no
                                           // longer exist in deploy directory of this project
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Defining dependencies.
dependencies {
    annotationProcessor wpi.java.deps.wpilibAnnotations()
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()
    implementation 'com.google.code.gson:gson:2.8.9' // Use the latest version
    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// --- PMD Configuration --- 
pmd {
    toolVersion = '7.9.0'    // Or any recent version
    ignoreFailures = true     // Don't fail the build on rule violations
    ruleSets = []             // Empty to rely on custom file
    ruleSetFiles = files('config/pmd/pmd-ruleset.xml')
}

tasks.named('pmdMain') {
    reports {
        xml.required.set(false)
        html.required.set(true)  // Generates an HTML report
        html.outputLocation.set(file("$buildDir/reports/pmd.html"))
    }
}

// --- SpotBugs Configuration ---
spotbugs {
    toolVersion = '4.7.3'
    reportLevel = 'high'
    excludeFilter = file("config/spotbugs/spotbugs-exclude.xml")
    effort = 'max'
    
    // Setting the report level to "low" or "medium" is not strictly necessary here
    // because we are filtering out lower-priority issues via the exclude filter.
    // You can leave reportLevel at its default value.
    // reportLevel = 'low'
}

tasks.withType(SpotBugsTask) {
    
    // Ensure that failures are not ignored so that the build fails when high issues exist.
    ignoreFailures = false
    
    reports {
        xml.enabled = false
        html.enabled = true
        html.destination = file("$buildDir/reports/spotbugs.html")
    }
}

tasks.named("check") {
    // Make sure our security tasks run as part of the check lifecycle
    dependsOn 'spotbugsMain'
}

// --- Jar configuration ---
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}